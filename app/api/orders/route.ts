import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET() {  try {    const session = await getServerSession(authOptions);    if (!session || !session.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const orders = await prisma.order.findMany({      where: { userId: session.user.id },      include: { orderItems: { include: { product: true } } },      orderBy: { createdAt: 'desc' },    });    return NextResponse.json(orders);  } catch (error) {    console.error('Error fetching orders:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function POST(request: Request) {  try {    const session = await getServerSession(authOptions);    if (!session || !session.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const body = await request.json();    const { customerName, customerPhone, customerAddress, items } = body;    if (!customerName || !customerPhone || !items || items.length === 0) {      return new NextResponse('Missing required fields', { status: 400 });    }    let totalAmount = 0;    const orderItemsData = [];    for (const item of items) {      const product = await prisma.product.findUnique({        where: { id: item.productId },      });      if (!product || product.stock < item.quantity) {        return new NextResponse(`Product ${product?.name || item.productId} is out of stock or quantity too high`, { status: 400 });      }      totalAmount += product.price * item.quantity;      orderItemsData.push({        productId: item.productId,        quantity: item.quantity,        priceAtOrder: product.price,      });      // Decrement stock      await prisma.product.update({        where: { id: item.productId },        data: { stock: { decrement: item.quantity } },      });    }    const newOrder = await prisma.order.create({      data: {        userId: session.user.id,        customerName,        customerPhone,        customerAddress,        totalAmount,        orderItems: {          create: orderItemsData,        },      },    });    return NextResponse.json(newOrder, { status: 201 });  } catch (error) {    console.error('Error creating order:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}