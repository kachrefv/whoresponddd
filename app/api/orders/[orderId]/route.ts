import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request, { params }: { params: { orderId: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session || !session.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { orderId } = params;    const order = await prisma.order.findUnique({      where: { id: orderId, userId: session.user.id },      include: { orderItems: { include: { product: true } } },    });    if (!order) {      return new NextResponse('Order not found', { status: 404 });    }    return NextResponse.json(order);  } catch (error) {    console.error('Error fetching order:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function PUT(request: Request, { params }: { params: { orderId: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session || !session.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { orderId } = params;    const body = await request.json();    const { status } = body;    if (!status) {      return new NextResponse('Missing status field', { status: 400 });    }    const updatedOrder = await prisma.order.update({      where: { id: orderId, userId: session.user.id },      data: { status },    });    return NextResponse.json(updatedOrder);  } catch (error) {    console.error('Error updating order:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function DELETE(request: Request, { params }: { params: { orderId: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session || !session.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { orderId } = params;    await prisma.order.delete({      where: { id: orderId, userId: session.user.id },    });    return new NextResponse(null, { status: 204 });  } catch (error) {    console.error('Error deleting order:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}